$date
Sun Apr  2 08:35:50 2017
$end
$version
Riviera-PRO Version 2015.06.92.5791
$end
$timescale
1 ns
$end

$scope module SCProcessor_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end

$scope module uut $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 1 % RegWrite $end
$var wire 1 & MemWrite $end
$var wire 1 ' ALUZero $end
$var wire 1 ( PCIncCo $end
$var wire 1 ) ALUSrc $end
$var wire 1 * MemtoReg $end
$var wire 1 + RegDst $end
$var wire 1 , Branch $end
$var wire 1 - PCSrc $end
$var wire 1 . PCBranchCo $end
$var wire 1 / Jump $end
$var wire 3 0 ALUControl [2:0] $end
$var wire 5 1 A3 [4:0] $end
$var wire 1 2 Instr [31] $end
$var wire 1 3 Instr [30] $end
$var wire 1 4 Instr [29] $end
$var wire 1 5 Instr [28] $end
$var wire 1 6 Instr [27] $end
$var wire 1 7 Instr [26] $end
$var wire 1 8 Instr [25] $end
$var wire 1 9 Instr [24] $end
$var wire 1 : Instr [23] $end
$var wire 1 ; Instr [22] $end
$var wire 1 < Instr [21] $end
$var wire 1 = Instr [20] $end
$var wire 1 > Instr [19] $end
$var wire 1 ? Instr [18] $end
$var wire 1 @ Instr [17] $end
$var wire 1 A Instr [16] $end
$var wire 1 B Instr [15] $end
$var wire 1 C Instr [14] $end
$var wire 1 D Instr [13] $end
$var wire 1 E Instr [12] $end
$var wire 1 F Instr [11] $end
$var wire 1 G Instr [10] $end
$var wire 1 H Instr [9] $end
$var wire 1 I Instr [8] $end
$var wire 1 J Instr [7] $end
$var wire 1 K Instr [6] $end
$var wire 1 L Instr [5] $end
$var wire 1 M Instr [4] $end
$var wire 1 N Instr [3] $end
$var wire 1 O Instr [2] $end
$var wire 1 P Instr [1] $end
$var wire 1 Q Instr [0] $end
$var wire 32 R RD1 [31:0] $end
$var wire 32 S RD2 [31:0] $end
$var wire 32 T SignImm [31:0] $end
$var wire 32 U ALUResult [31:0] $end
$var wire 32 V RAMOut [31:0] $end
$var wire 32 W PCIn [31:0] $end
$var wire 1 X PCOut [31] $end
$var wire 1 Y PCOut [30] $end
$var wire 1 Z PCOut [29] $end
$var wire 1 [ PCOut [28] $end
$var wire 1 \ PCOut [27] $end
$var wire 1 ] PCOut [26] $end
$var wire 1 ^ PCOut [25] $end
$var wire 1 _ PCOut [24] $end
$var wire 1 ` PCOut [23] $end
$var wire 1 a PCOut [22] $end
$var wire 1 b PCOut [21] $end
$var wire 1 c PCOut [20] $end
$var wire 1 d PCOut [19] $end
$var wire 1 e PCOut [18] $end
$var wire 1 f PCOut [17] $end
$var wire 1 g PCOut [16] $end
$var wire 1 h PCOut [15] $end
$var wire 1 i PCOut [14] $end
$var wire 1 j PCOut [13] $end
$var wire 1 k PCOut [12] $end
$var wire 1 l PCOut [11] $end
$var wire 1 m PCOut [10] $end
$var wire 1 n PCOut [9] $end
$var wire 1 o PCOut [8] $end
$var wire 1 p PCOut [7] $end
$var wire 1 q PCOut [6] $end
$var wire 1 r PCOut [5] $end
$var wire 1 s PCOut [4] $end
$var wire 1 t PCOut [3] $end
$var wire 1 u PCOut [2] $end
$var wire 1 v PCOut [1] $end
$var wire 1 w PCOut [0] $end
$var wire 32 x SrcB [31:0] $end
$var wire 32 y WD3 [31:0] $end
$var wire 1 z PCPlus4 [31] $end
$var wire 1 { PCPlus4 [30] $end
$var wire 1 | PCPlus4 [29] $end
$var wire 1 } PCPlus4 [28] $end
$var wire 1 ~ PCPlus4 [27] $end
$var wire 1 !! PCPlus4 [26] $end
$var wire 1 "! PCPlus4 [25] $end
$var wire 1 #! PCPlus4 [24] $end
$var wire 1 $! PCPlus4 [23] $end
$var wire 1 %! PCPlus4 [22] $end
$var wire 1 &! PCPlus4 [21] $end
$var wire 1 '! PCPlus4 [20] $end
$var wire 1 (! PCPlus4 [19] $end
$var wire 1 )! PCPlus4 [18] $end
$var wire 1 *! PCPlus4 [17] $end
$var wire 1 +! PCPlus4 [16] $end
$var wire 1 ,! PCPlus4 [15] $end
$var wire 1 -! PCPlus4 [14] $end
$var wire 1 .! PCPlus4 [13] $end
$var wire 1 /! PCPlus4 [12] $end
$var wire 1 0! PCPlus4 [11] $end
$var wire 1 1! PCPlus4 [10] $end
$var wire 1 2! PCPlus4 [9] $end
$var wire 1 3! PCPlus4 [8] $end
$var wire 1 4! PCPlus4 [7] $end
$var wire 1 5! PCPlus4 [6] $end
$var wire 1 6! PCPlus4 [5] $end
$var wire 1 7! PCPlus4 [4] $end
$var wire 1 8! PCPlus4 [3] $end
$var wire 1 9! PCPlus4 [2] $end
$var wire 1 :! PCPlus4 [1] $end
$var wire 1 ;! PCPlus4 [0] $end
$var wire 1 <! PCBranch [31] $end
$var wire 1 =! PCBranch [30] $end
$var wire 1 >! PCBranch [29] $end
$var wire 1 ?! PCBranch [28] $end
$var wire 1 @! PCBranch [27] $end
$var wire 1 A! PCBranch [26] $end
$var wire 1 B! PCBranch [25] $end
$var wire 1 C! PCBranch [24] $end
$var wire 1 D! PCBranch [23] $end
$var wire 1 E! PCBranch [22] $end
$var wire 1 F! PCBranch [21] $end
$var wire 1 G! PCBranch [20] $end
$var wire 1 H! PCBranch [19] $end
$var wire 1 I! PCBranch [18] $end
$var wire 1 J! PCBranch [17] $end
$var wire 1 K! PCBranch [16] $end
$var wire 1 L! PCBranch [15] $end
$var wire 1 M! PCBranch [14] $end
$var wire 1 N! PCBranch [13] $end
$var wire 1 O! PCBranch [12] $end
$var wire 1 P! PCBranch [11] $end
$var wire 1 Q! PCBranch [10] $end
$var wire 1 R! PCBranch [9] $end
$var wire 1 S! PCBranch [8] $end
$var wire 1 T! PCBranch [7] $end
$var wire 1 U! PCBranch [6] $end
$var wire 1 V! PCBranch [5] $end
$var wire 1 W! PCBranch [4] $end
$var wire 1 X! PCBranch [3] $end
$var wire 1 Y! PCBranch [2] $end
$var wire 1 Z! PCBranch [1] $end
$var wire 1 [! PCBranch [0] $end
$var wire 32 \! PCBranchTemp [31:0] $end
$var wire 32 ]! PCJump [31:0] $end
$var wire 1 ^! SignImm4 [31] $end
$var wire 1 _! SignImm4 [30] $end
$var wire 1 `! SignImm4 [29] $end
$var wire 1 a! SignImm4 [28] $end
$var wire 1 b! SignImm4 [27] $end
$var wire 1 c! SignImm4 [26] $end
$var wire 1 d! SignImm4 [25] $end
$var wire 1 e! SignImm4 [24] $end
$var wire 1 f! SignImm4 [23] $end
$var wire 1 g! SignImm4 [22] $end
$var wire 1 h! SignImm4 [21] $end
$var wire 1 i! SignImm4 [20] $end
$var wire 1 j! SignImm4 [19] $end
$var wire 1 k! SignImm4 [18] $end
$var wire 1 l! SignImm4 [17] $end
$var wire 1 m! SignImm4 [16] $end
$var wire 1 n! SignImm4 [15] $end
$var wire 1 o! SignImm4 [14] $end
$var wire 1 p! SignImm4 [13] $end
$var wire 1 q! SignImm4 [12] $end
$var wire 1 r! SignImm4 [11] $end
$var wire 1 s! SignImm4 [10] $end
$var wire 1 t! SignImm4 [9] $end
$var wire 1 u! SignImm4 [8] $end
$var wire 1 v! SignImm4 [7] $end
$var wire 1 w! SignImm4 [6] $end
$var wire 1 x! SignImm4 [5] $end
$var wire 1 y! SignImm4 [4] $end
$var wire 1 z! SignImm4 [3] $end
$var wire 1 {! SignImm4 [2] $end
$var wire 1 |! SignImm4 [1] $end
$var wire 1 }! SignImm4 [0] $end
$var parameter 32 ~! N $end
$var parameter 32 !" M $end

$scope module PC $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 32 W d [31:0] $end
$var reg 32 "" q [31:0] $end
$var parameter 32 #" n $end
$upscope $end


$scope module ROM $end
$var wire 1 # clk $end
$var wire 1 X adr [31] $end
$var wire 1 Y adr [30] $end
$var wire 1 Z adr [29] $end
$var wire 1 [ adr [28] $end
$var wire 1 \ adr [27] $end
$var wire 1 ] adr [26] $end
$var wire 1 ^ adr [25] $end
$var wire 1 _ adr [24] $end
$var wire 1 ` adr [23] $end
$var wire 1 a adr [22] $end
$var wire 1 b adr [21] $end
$var wire 1 c adr [20] $end
$var wire 1 d adr [19] $end
$var wire 1 e adr [18] $end
$var wire 1 f adr [17] $end
$var wire 1 g adr [16] $end
$var wire 1 h adr [15] $end
$var wire 1 i adr [14] $end
$var wire 1 j adr [13] $end
$var wire 1 k adr [12] $end
$var wire 1 l adr [11] $end
$var wire 1 m adr [10] $end
$var wire 1 n adr [9] $end
$var wire 1 o adr [8] $end
$var wire 1 p adr [7] $end
$var wire 1 q adr [6] $end
$var wire 1 r adr [5] $end
$var wire 1 s adr [4] $end
$var wire 1 t adr [3] $end
$var wire 1 u adr [2] $end
$var wire 1 v adr [1] $end
$var wire 1 w adr [0] $end
$var reg 32 $" dout [31:0] $end
$var parameter 32 %" N $end
$var parameter 32 &" M $end
$upscope $end


$scope module Regs $end
$var wire 1 # clk $end
$var wire 1 % we $end
$var wire 1 8 ra1 [4] $end
$var wire 1 9 ra1 [3] $end
$var wire 1 : ra1 [2] $end
$var wire 1 ; ra1 [1] $end
$var wire 1 < ra1 [0] $end
$var wire 1 = ra2 [4] $end
$var wire 1 > ra2 [3] $end
$var wire 1 ? ra2 [2] $end
$var wire 1 @ ra2 [1] $end
$var wire 1 A ra2 [0] $end
$var wire 5 1 wa [4:0] $end
$var wire 32 y wd [31:0] $end
$var reg 32 '" rd1 [31:0] $end
$var reg 32 (" rd2 [31:0] $end
$upscope $end


$scope module SignExt $end
$var wire 1 B a [15] $end
$var wire 1 C a [14] $end
$var wire 1 D a [13] $end
$var wire 1 E a [12] $end
$var wire 1 F a [11] $end
$var wire 1 G a [10] $end
$var wire 1 H a [9] $end
$var wire 1 I a [8] $end
$var wire 1 J a [7] $end
$var wire 1 K a [6] $end
$var wire 1 L a [5] $end
$var wire 1 M a [4] $end
$var wire 1 N a [3] $end
$var wire 1 O a [2] $end
$var wire 1 P a [1] $end
$var wire 1 Q a [0] $end
$var wire 32 T y [31:0] $end
$upscope $end


$scope module ALU $end
$var wire 32 )" a [31:0] $end
$var wire 32 *" b [31:0] $end
$var wire 3 0 f [2:0] $end
$var wire 1 G shamt [4] $end
$var wire 1 H shamt [3] $end
$var wire 1 I shamt [2] $end
$var wire 1 J shamt [1] $end
$var wire 1 K shamt [0] $end
$var wire 1 ' zero $end
$var reg 32 +" y [31:0] $end
$upscope $end


$scope module RAM $end
$var wire 1 # clk $end
$var wire 1 & we $end
$var wire 32 U adr [31:0] $end
$var wire 32 S din [31:0] $end
$var wire 32 V dout [31:0] $end
$var parameter 32 ," N $end
$var parameter 32 -" M $end
$upscope $end


$scope module PCInc $end
$var wire 1 X a [31] $end
$var wire 1 Y a [30] $end
$var wire 1 Z a [29] $end
$var wire 1 [ a [28] $end
$var wire 1 \ a [27] $end
$var wire 1 ] a [26] $end
$var wire 1 ^ a [25] $end
$var wire 1 _ a [24] $end
$var wire 1 ` a [23] $end
$var wire 1 a a [22] $end
$var wire 1 b a [21] $end
$var wire 1 c a [20] $end
$var wire 1 d a [19] $end
$var wire 1 e a [18] $end
$var wire 1 f a [17] $end
$var wire 1 g a [16] $end
$var wire 1 h a [15] $end
$var wire 1 i a [14] $end
$var wire 1 j a [13] $end
$var wire 1 k a [12] $end
$var wire 1 l a [11] $end
$var wire 1 m a [10] $end
$var wire 1 n a [9] $end
$var wire 1 o a [8] $end
$var wire 1 p a [7] $end
$var wire 1 q a [6] $end
$var wire 1 r a [5] $end
$var wire 1 s a [4] $end
$var wire 1 t a [3] $end
$var wire 1 u a [2] $end
$var wire 1 v a [1] $end
$var wire 1 w a [0] $end
$var wire 1 ." b [31] $end
$var wire 1 /" b [30] $end
$var wire 1 0" b [29] $end
$var wire 1 1" b [28] $end
$var wire 1 2" b [27] $end
$var wire 1 3" b [26] $end
$var wire 1 4" b [25] $end
$var wire 1 5" b [24] $end
$var wire 1 6" b [23] $end
$var wire 1 7" b [22] $end
$var wire 1 8" b [21] $end
$var wire 1 9" b [20] $end
$var wire 1 :" b [19] $end
$var wire 1 ;" b [18] $end
$var wire 1 <" b [17] $end
$var wire 1 =" b [16] $end
$var wire 1 >" b [15] $end
$var wire 1 ?" b [14] $end
$var wire 1 @" b [13] $end
$var wire 1 A" b [12] $end
$var wire 1 B" b [11] $end
$var wire 1 C" b [10] $end
$var wire 1 D" b [9] $end
$var wire 1 E" b [8] $end
$var wire 1 F" b [7] $end
$var wire 1 G" b [6] $end
$var wire 1 H" b [5] $end
$var wire 1 I" b [4] $end
$var wire 1 J" b [3] $end
$var wire 1 K" b [2] $end
$var wire 1 L" b [1] $end
$var wire 1 M" b [0] $end
$var wire 1 N" ci $end
$var wire 1 z s [31] $end
$var wire 1 { s [30] $end
$var wire 1 | s [29] $end
$var wire 1 } s [28] $end
$var wire 1 ~ s [27] $end
$var wire 1 !! s [26] $end
$var wire 1 "! s [25] $end
$var wire 1 #! s [24] $end
$var wire 1 $! s [23] $end
$var wire 1 %! s [22] $end
$var wire 1 &! s [21] $end
$var wire 1 '! s [20] $end
$var wire 1 (! s [19] $end
$var wire 1 )! s [18] $end
$var wire 1 *! s [17] $end
$var wire 1 +! s [16] $end
$var wire 1 ,! s [15] $end
$var wire 1 -! s [14] $end
$var wire 1 .! s [13] $end
$var wire 1 /! s [12] $end
$var wire 1 0! s [11] $end
$var wire 1 1! s [10] $end
$var wire 1 2! s [9] $end
$var wire 1 3! s [8] $end
$var wire 1 4! s [7] $end
$var wire 1 5! s [6] $end
$var wire 1 6! s [5] $end
$var wire 1 7! s [4] $end
$var wire 1 8! s [3] $end
$var wire 1 9! s [2] $end
$var wire 1 :! s [1] $end
$var wire 1 ;! s [0] $end
$var wire 1 ( co $end
$var wire 1 O" c [32] $end
$var wire 1 P" c [31] $end
$var wire 1 Q" c [30] $end
$var wire 1 R" c [29] $end
$var wire 1 S" c [28] $end
$var wire 1 T" c [27] $end
$var wire 1 U" c [26] $end
$var wire 1 V" c [25] $end
$var wire 1 W" c [24] $end
$var wire 1 X" c [23] $end
$var wire 1 Y" c [22] $end
$var wire 1 Z" c [21] $end
$var wire 1 [" c [20] $end
$var wire 1 \" c [19] $end
$var wire 1 ]" c [18] $end
$var wire 1 ^" c [17] $end
$var wire 1 _" c [16] $end
$var wire 1 `" c [15] $end
$var wire 1 a" c [14] $end
$var wire 1 b" c [13] $end
$var wire 1 c" c [12] $end
$var wire 1 d" c [11] $end
$var wire 1 e" c [10] $end
$var wire 1 f" c [9] $end
$var wire 1 g" c [8] $end
$var wire 1 h" c [7] $end
$var wire 1 i" c [6] $end
$var wire 1 j" c [5] $end
$var wire 1 k" c [4] $end
$var wire 1 l" c [3] $end
$var wire 1 m" c [2] $end
$var wire 1 n" c [1] $end
$var wire 1 o" c [0] $end
$var parameter 32 p" n $end

$scope module addbit[0] $end
$var parameter 32 q" i $end

$scope module f $end
$var wire 1 w A $end
$var wire 1 M" B $end
$var wire 1 o" cin $end
$var wire 1 ;! S $end
$var wire 1 n" cout $end
$var wire 1 r" w1 $end
$var wire 1 s" w2 $end
$var wire 1 t" w3 $end
$var wire 1 u" w4 $end
$upscope $end

$upscope $end


$scope module addbit[1] $end
$var parameter 32 v" i $end

$scope module f $end
$var wire 1 v A $end
$var wire 1 L" B $end
$var wire 1 n" cin $end
$var wire 1 :! S $end
$var wire 1 m" cout $end
$var wire 1 w" w1 $end
$var wire 1 x" w2 $end
$var wire 1 y" w3 $end
$var wire 1 z" w4 $end
$upscope $end

$upscope $end


$scope module addbit[2] $end
$var parameter 32 {" i $end

$scope module f $end
$var wire 1 u A $end
$var wire 1 K" B $end
$var wire 1 m" cin $end
$var wire 1 9! S $end
$var wire 1 l" cout $end
$var wire 1 |" w1 $end
$var wire 1 }" w2 $end
$var wire 1 ~" w3 $end
$var wire 1 !# w4 $end
$upscope $end

$upscope $end


$scope module addbit[3] $end
$var parameter 32 "# i $end

$scope module f $end
$var wire 1 t A $end
$var wire 1 J" B $end
$var wire 1 l" cin $end
$var wire 1 8! S $end
$var wire 1 k" cout $end
$var wire 1 ## w1 $end
$var wire 1 $# w2 $end
$var wire 1 %# w3 $end
$var wire 1 &# w4 $end
$upscope $end

$upscope $end


$scope module addbit[4] $end
$var parameter 32 '# i $end

$scope module f $end
$var wire 1 s A $end
$var wire 1 I" B $end
$var wire 1 k" cin $end
$var wire 1 7! S $end
$var wire 1 j" cout $end
$var wire 1 (# w1 $end
$var wire 1 )# w2 $end
$var wire 1 *# w3 $end
$var wire 1 +# w4 $end
$upscope $end

$upscope $end


$scope module addbit[5] $end
$var parameter 32 ,# i $end

$scope module f $end
$var wire 1 r A $end
$var wire 1 H" B $end
$var wire 1 j" cin $end
$var wire 1 6! S $end
$var wire 1 i" cout $end
$var wire 1 -# w1 $end
$var wire 1 .# w2 $end
$var wire 1 /# w3 $end
$var wire 1 0# w4 $end
$upscope $end

$upscope $end


$scope module addbit[6] $end
$var parameter 32 1# i $end

$scope module f $end
$var wire 1 q A $end
$var wire 1 G" B $end
$var wire 1 i" cin $end
$var wire 1 5! S $end
$var wire 1 h" cout $end
$var wire 1 2# w1 $end
$var wire 1 3# w2 $end
$var wire 1 4# w3 $end
$var wire 1 5# w4 $end
$upscope $end

$upscope $end


$scope module addbit[7] $end
$var parameter 32 6# i $end

$scope module f $end
$var wire 1 p A $end
$var wire 1 F" B $end
$var wire 1 h" cin $end
$var wire 1 4! S $end
$var wire 1 g" cout $end
$var wire 1 7# w1 $end
$var wire 1 8# w2 $end
$var wire 1 9# w3 $end
$var wire 1 :# w4 $end
$upscope $end

$upscope $end


$scope module addbit[8] $end
$var parameter 32 ;# i $end

$scope module f $end
$var wire 1 o A $end
$var wire 1 E" B $end
$var wire 1 g" cin $end
$var wire 1 3! S $end
$var wire 1 f" cout $end
$var wire 1 <# w1 $end
$var wire 1 =# w2 $end
$var wire 1 ># w3 $end
$var wire 1 ?# w4 $end
$upscope $end

$upscope $end


$scope module addbit[9] $end
$var parameter 32 @# i $end

$scope module f $end
$var wire 1 n A $end
$var wire 1 D" B $end
$var wire 1 f" cin $end
$var wire 1 2! S $end
$var wire 1 e" cout $end
$var wire 1 A# w1 $end
$var wire 1 B# w2 $end
$var wire 1 C# w3 $end
$var wire 1 D# w4 $end
$upscope $end

$upscope $end


$scope module addbit[10] $end
$var parameter 32 E# i $end

$scope module f $end
$var wire 1 m A $end
$var wire 1 C" B $end
$var wire 1 e" cin $end
$var wire 1 1! S $end
$var wire 1 d" cout $end
$var wire 1 F# w1 $end
$var wire 1 G# w2 $end
$var wire 1 H# w3 $end
$var wire 1 I# w4 $end
$upscope $end

$upscope $end


$scope module addbit[11] $end
$var parameter 32 J# i $end

$scope module f $end
$var wire 1 l A $end
$var wire 1 B" B $end
$var wire 1 d" cin $end
$var wire 1 0! S $end
$var wire 1 c" cout $end
$var wire 1 K# w1 $end
$var wire 1 L# w2 $end
$var wire 1 M# w3 $end
$var wire 1 N# w4 $end
$upscope $end

$upscope $end


$scope module addbit[12] $end
$var parameter 32 O# i $end

$scope module f $end
$var wire 1 k A $end
$var wire 1 A" B $end
$var wire 1 c" cin $end
$var wire 1 /! S $end
$var wire 1 b" cout $end
$var wire 1 P# w1 $end
$var wire 1 Q# w2 $end
$var wire 1 R# w3 $end
$var wire 1 S# w4 $end
$upscope $end

$upscope $end


$scope module addbit[13] $end
$var parameter 32 T# i $end

$scope module f $end
$var wire 1 j A $end
$var wire 1 @" B $end
$var wire 1 b" cin $end
$var wire 1 .! S $end
$var wire 1 a" cout $end
$var wire 1 U# w1 $end
$var wire 1 V# w2 $end
$var wire 1 W# w3 $end
$var wire 1 X# w4 $end
$upscope $end

$upscope $end


$scope module addbit[14] $end
$var parameter 32 Y# i $end

$scope module f $end
$var wire 1 i A $end
$var wire 1 ?" B $end
$var wire 1 a" cin $end
$var wire 1 -! S $end
$var wire 1 `" cout $end
$var wire 1 Z# w1 $end
$var wire 1 [# w2 $end
$var wire 1 \# w3 $end
$var wire 1 ]# w4 $end
$upscope $end

$upscope $end


$scope module addbit[15] $end
$var parameter 32 ^# i $end

$scope module f $end
$var wire 1 h A $end
$var wire 1 >" B $end
$var wire 1 `" cin $end
$var wire 1 ,! S $end
$var wire 1 _" cout $end
$var wire 1 _# w1 $end
$var wire 1 `# w2 $end
$var wire 1 a# w3 $end
$var wire 1 b# w4 $end
$upscope $end

$upscope $end


$scope module addbit[16] $end
$var parameter 32 c# i $end

$scope module f $end
$var wire 1 g A $end
$var wire 1 =" B $end
$var wire 1 _" cin $end
$var wire 1 +! S $end
$var wire 1 ^" cout $end
$var wire 1 d# w1 $end
$var wire 1 e# w2 $end
$var wire 1 f# w3 $end
$var wire 1 g# w4 $end
$upscope $end

$upscope $end


$scope module addbit[17] $end
$var parameter 32 h# i $end

$scope module f $end
$var wire 1 f A $end
$var wire 1 <" B $end
$var wire 1 ^" cin $end
$var wire 1 *! S $end
$var wire 1 ]" cout $end
$var wire 1 i# w1 $end
$var wire 1 j# w2 $end
$var wire 1 k# w3 $end
$var wire 1 l# w4 $end
$upscope $end

$upscope $end


$scope module addbit[18] $end
$var parameter 32 m# i $end

$scope module f $end
$var wire 1 e A $end
$var wire 1 ;" B $end
$var wire 1 ]" cin $end
$var wire 1 )! S $end
$var wire 1 \" cout $end
$var wire 1 n# w1 $end
$var wire 1 o# w2 $end
$var wire 1 p# w3 $end
$var wire 1 q# w4 $end
$upscope $end

$upscope $end


$scope module addbit[19] $end
$var parameter 32 r# i $end

$scope module f $end
$var wire 1 d A $end
$var wire 1 :" B $end
$var wire 1 \" cin $end
$var wire 1 (! S $end
$var wire 1 [" cout $end
$var wire 1 s# w1 $end
$var wire 1 t# w2 $end
$var wire 1 u# w3 $end
$var wire 1 v# w4 $end
$upscope $end

$upscope $end


$scope module addbit[20] $end
$var parameter 32 w# i $end

$scope module f $end
$var wire 1 c A $end
$var wire 1 9" B $end
$var wire 1 [" cin $end
$var wire 1 '! S $end
$var wire 1 Z" cout $end
$var wire 1 x# w1 $end
$var wire 1 y# w2 $end
$var wire 1 z# w3 $end
$var wire 1 {# w4 $end
$upscope $end

$upscope $end


$scope module addbit[21] $end
$var parameter 32 |# i $end

$scope module f $end
$var wire 1 b A $end
$var wire 1 8" B $end
$var wire 1 Z" cin $end
$var wire 1 &! S $end
$var wire 1 Y" cout $end
$var wire 1 }# w1 $end
$var wire 1 ~# w2 $end
$var wire 1 !$ w3 $end
$var wire 1 "$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[22] $end
$var parameter 32 #$ i $end

$scope module f $end
$var wire 1 a A $end
$var wire 1 7" B $end
$var wire 1 Y" cin $end
$var wire 1 %! S $end
$var wire 1 X" cout $end
$var wire 1 $$ w1 $end
$var wire 1 %$ w2 $end
$var wire 1 &$ w3 $end
$var wire 1 '$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[23] $end
$var parameter 32 ($ i $end

$scope module f $end
$var wire 1 ` A $end
$var wire 1 6" B $end
$var wire 1 X" cin $end
$var wire 1 $! S $end
$var wire 1 W" cout $end
$var wire 1 )$ w1 $end
$var wire 1 *$ w2 $end
$var wire 1 +$ w3 $end
$var wire 1 ,$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[24] $end
$var parameter 32 -$ i $end

$scope module f $end
$var wire 1 _ A $end
$var wire 1 5" B $end
$var wire 1 W" cin $end
$var wire 1 #! S $end
$var wire 1 V" cout $end
$var wire 1 .$ w1 $end
$var wire 1 /$ w2 $end
$var wire 1 0$ w3 $end
$var wire 1 1$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[25] $end
$var parameter 32 2$ i $end

$scope module f $end
$var wire 1 ^ A $end
$var wire 1 4" B $end
$var wire 1 V" cin $end
$var wire 1 "! S $end
$var wire 1 U" cout $end
$var wire 1 3$ w1 $end
$var wire 1 4$ w2 $end
$var wire 1 5$ w3 $end
$var wire 1 6$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[26] $end
$var parameter 32 7$ i $end

$scope module f $end
$var wire 1 ] A $end
$var wire 1 3" B $end
$var wire 1 U" cin $end
$var wire 1 !! S $end
$var wire 1 T" cout $end
$var wire 1 8$ w1 $end
$var wire 1 9$ w2 $end
$var wire 1 :$ w3 $end
$var wire 1 ;$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[27] $end
$var parameter 32 <$ i $end

$scope module f $end
$var wire 1 \ A $end
$var wire 1 2" B $end
$var wire 1 T" cin $end
$var wire 1 ~ S $end
$var wire 1 S" cout $end
$var wire 1 =$ w1 $end
$var wire 1 >$ w2 $end
$var wire 1 ?$ w3 $end
$var wire 1 @$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[28] $end
$var parameter 32 A$ i $end

$scope module f $end
$var wire 1 [ A $end
$var wire 1 1" B $end
$var wire 1 S" cin $end
$var wire 1 } S $end
$var wire 1 R" cout $end
$var wire 1 B$ w1 $end
$var wire 1 C$ w2 $end
$var wire 1 D$ w3 $end
$var wire 1 E$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[29] $end
$var parameter 32 F$ i $end

$scope module f $end
$var wire 1 Z A $end
$var wire 1 0" B $end
$var wire 1 R" cin $end
$var wire 1 | S $end
$var wire 1 Q" cout $end
$var wire 1 G$ w1 $end
$var wire 1 H$ w2 $end
$var wire 1 I$ w3 $end
$var wire 1 J$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[30] $end
$var parameter 32 K$ i $end

$scope module f $end
$var wire 1 Y A $end
$var wire 1 /" B $end
$var wire 1 Q" cin $end
$var wire 1 { S $end
$var wire 1 P" cout $end
$var wire 1 L$ w1 $end
$var wire 1 M$ w2 $end
$var wire 1 N$ w3 $end
$var wire 1 O$ w4 $end
$upscope $end

$upscope $end


$scope module addbit[31] $end
$var parameter 32 P$ i $end

$scope module f $end
$var wire 1 X A $end
$var wire 1 ." B $end
$var wire 1 P" cin $end
$var wire 1 z S $end
$var wire 1 O" cout $end
$var wire 1 Q$ w1 $end
$var wire 1 R$ w2 $end
$var wire 1 S$ w3 $end
$var wire 1 T$ w4 $end
$upscope $end

$upscope $end

$upscope $end


$scope module ALUSrcBMux $end
$var wire 32 S d0 [31:0] $end
$var wire 32 T d1 [31:0] $end
$var wire 1 ) s $end
$var wire 32 x y [31:0] $end
$var parameter 32 U$ n $end

$scope module addbit[0] $end
$var parameter 32 V$ i $end
$upscope $end


$scope module addbit[1] $end
$var parameter 32 W$ i $end
$upscope $end


$scope module addbit[2] $end
$var parameter 32 X$ i $end
$upscope $end


$scope module addbit[3] $end
$var parameter 32 Y$ i $end
$upscope $end


$scope module addbit[4] $end
$var parameter 32 Z$ i $end
$upscope $end


$scope module addbit[5] $end
$var parameter 32 [$ i $end
$upscope $end


$scope module addbit[6] $end
$var parameter 32 \$ i $end
$upscope $end


$scope module addbit[7] $end
$var parameter 32 ]$ i $end
$upscope $end


$scope module addbit[8] $end
$var parameter 32 ^$ i $end
$upscope $end


$scope module addbit[9] $end
$var parameter 32 _$ i $end
$upscope $end


$scope module addbit[10] $end
$var parameter 32 `$ i $end
$upscope $end


$scope module addbit[11] $end
$var parameter 32 a$ i $end
$upscope $end


$scope module addbit[12] $end
$var parameter 32 b$ i $end
$upscope $end


$scope module addbit[13] $end
$var parameter 32 c$ i $end
$upscope $end


$scope module addbit[14] $end
$var parameter 32 d$ i $end
$upscope $end


$scope module addbit[15] $end
$var parameter 32 e$ i $end
$upscope $end


$scope module addbit[16] $end
$var parameter 32 f$ i $end
$upscope $end


$scope module addbit[17] $end
$var parameter 32 g$ i $end
$upscope $end


$scope module addbit[18] $end
$var parameter 32 h$ i $end
$upscope $end


$scope module addbit[19] $end
$var parameter 32 i$ i $end
$upscope $end


$scope module addbit[20] $end
$var parameter 32 j$ i $end
$upscope $end


$scope module addbit[21] $end
$var parameter 32 k$ i $end
$upscope $end


$scope module addbit[22] $end
$var parameter 32 l$ i $end
$upscope $end


$scope module addbit[23] $end
$var parameter 32 m$ i $end
$upscope $end


$scope module addbit[24] $end
$var parameter 32 n$ i $end
$upscope $end


$scope module addbit[25] $end
$var parameter 32 o$ i $end
$upscope $end


$scope module addbit[26] $end
$var parameter 32 p$ i $end
$upscope $end


$scope module addbit[27] $end
$var parameter 32 q$ i $end
$upscope $end


$scope module addbit[28] $end
$var parameter 32 r$ i $end
$upscope $end


$scope module addbit[29] $end
$var parameter 32 s$ i $end
$upscope $end


$scope module addbit[30] $end
$var parameter 32 t$ i $end
$upscope $end


$scope module addbit[31] $end
$var parameter 32 u$ i $end
$upscope $end

$upscope $end


$scope module MemtoRegMux $end
$var wire 32 U d0 [31:0] $end
$var wire 32 V d1 [31:0] $end
$var wire 1 * s $end
$var wire 32 y y [31:0] $end
$var parameter 32 v$ n $end

$scope module addbit[0] $end
$var parameter 32 w$ i $end
$upscope $end


$scope module addbit[1] $end
$var parameter 32 x$ i $end
$upscope $end


$scope module addbit[2] $end
$var parameter 32 y$ i $end
$upscope $end


$scope module addbit[3] $end
$var parameter 32 z$ i $end
$upscope $end


$scope module addbit[4] $end
$var parameter 32 {$ i $end
$upscope $end


$scope module addbit[5] $end
$var parameter 32 |$ i $end
$upscope $end


$scope module addbit[6] $end
$var parameter 32 }$ i $end
$upscope $end


$scope module addbit[7] $end
$var parameter 32 ~$ i $end
$upscope $end


$scope module addbit[8] $end
$var parameter 32 !% i $end
$upscope $end


$scope module addbit[9] $end
$var parameter 32 "% i $end
$upscope $end


$scope module addbit[10] $end
$var parameter 32 #% i $end
$upscope $end


$scope module addbit[11] $end
$var parameter 32 $% i $end
$upscope $end


$scope module addbit[12] $end
$var parameter 32 %% i $end
$upscope $end


$scope module addbit[13] $end
$var parameter 32 &% i $end
$upscope $end


$scope module addbit[14] $end
$var parameter 32 '% i $end
$upscope $end


$scope module addbit[15] $end
$var parameter 32 (% i $end
$upscope $end


$scope module addbit[16] $end
$var parameter 32 )% i $end
$upscope $end


$scope module addbit[17] $end
$var parameter 32 *% i $end
$upscope $end


$scope module addbit[18] $end
$var parameter 32 +% i $end
$upscope $end


$scope module addbit[19] $end
$var parameter 32 ,% i $end
$upscope $end


$scope module addbit[20] $end
$var parameter 32 -% i $end
$upscope $end


$scope module addbit[21] $end
$var parameter 32 .% i $end
$upscope $end


$scope module addbit[22] $end
$var parameter 32 /% i $end
$upscope $end


$scope module addbit[23] $end
$var parameter 32 0% i $end
$upscope $end


$scope module addbit[24] $end
$var parameter 32 1% i $end
$upscope $end


$scope module addbit[25] $end
$var parameter 32 2% i $end
$upscope $end


$scope module addbit[26] $end
$var parameter 32 3% i $end
$upscope $end


$scope module addbit[27] $end
$var parameter 32 4% i $end
$upscope $end


$scope module addbit[28] $end
$var parameter 32 5% i $end
$upscope $end


$scope module addbit[29] $end
$var parameter 32 6% i $end
$upscope $end


$scope module addbit[30] $end
$var parameter 32 7% i $end
$upscope $end


$scope module addbit[31] $end
$var parameter 32 8% i $end
$upscope $end

$upscope $end


$scope module RegDstMux $end
$var wire 1 = d0 [4] $end
$var wire 1 > d0 [3] $end
$var wire 1 ? d0 [2] $end
$var wire 1 @ d0 [1] $end
$var wire 1 A d0 [0] $end
$var wire 1 B d1 [4] $end
$var wire 1 C d1 [3] $end
$var wire 1 D d1 [2] $end
$var wire 1 E d1 [1] $end
$var wire 1 F d1 [0] $end
$var wire 1 + s $end
$var wire 5 1 y [4:0] $end
$var parameter 32 9% n $end

$scope module addbit[0] $end
$var parameter 32 :% i $end
$upscope $end


$scope module addbit[1] $end
$var parameter 32 ;% i $end
$upscope $end


$scope module addbit[2] $end
$var parameter 32 <% i $end
$upscope $end


$scope module addbit[3] $end
$var parameter 32 =% i $end
$upscope $end


$scope module addbit[4] $end
$var parameter 32 >% i $end
$upscope $end

$upscope $end


$scope module PCSrcMux $end
$var wire 1 z d0 [31] $end
$var wire 1 { d0 [30] $end
$var wire 1 | d0 [29] $end
$var wire 1 } d0 [28] $end
$var wire 1 ~ d0 [27] $end
$var wire 1 !! d0 [26] $end
$var wire 1 "! d0 [25] $end
$var wire 1 #! d0 [24] $end
$var wire 1 $! d0 [23] $end
$var wire 1 %! d0 [22] $end
$var wire 1 &! d0 [21] $end
$var wire 1 '! d0 [20] $end
$var wire 1 (! d0 [19] $end
$var wire 1 )! d0 [18] $end
$var wire 1 *! d0 [17] $end
$var wire 1 +! d0 [16] $end
$var wire 1 ,! d0 [15] $end
$var wire 1 -! d0 [14] $end
$var wire 1 .! d0 [13] $end
$var wire 1 /! d0 [12] $end
$var wire 1 0! d0 [11] $end
$var wire 1 1! d0 [10] $end
$var wire 1 2! d0 [9] $end
$var wire 1 3! d0 [8] $end
$var wire 1 4! d0 [7] $end
$var wire 1 5! d0 [6] $end
$var wire 1 6! d0 [5] $end
$var wire 1 7! d0 [4] $end
$var wire 1 8! d0 [3] $end
$var wire 1 9! d0 [2] $end
$var wire 1 :! d0 [1] $end
$var wire 1 ;! d0 [0] $end
$var wire 1 <! d1 [31] $end
$var wire 1 =! d1 [30] $end
$var wire 1 >! d1 [29] $end
$var wire 1 ?! d1 [28] $end
$var wire 1 @! d1 [27] $end
$var wire 1 A! d1 [26] $end
$var wire 1 B! d1 [25] $end
$var wire 1 C! d1 [24] $end
$var wire 1 D! d1 [23] $end
$var wire 1 E! d1 [22] $end
$var wire 1 F! d1 [21] $end
$var wire 1 G! d1 [20] $end
$var wire 1 H! d1 [19] $end
$var wire 1 I! d1 [18] $end
$var wire 1 J! d1 [17] $end
$var wire 1 K! d1 [16] $end
$var wire 1 L! d1 [15] $end
$var wire 1 M! d1 [14] $end
$var wire 1 N! d1 [13] $end
$var wire 1 O! d1 [12] $end
$var wire 1 P! d1 [11] $end
$var wire 1 Q! d1 [10] $end
$var wire 1 R! d1 [9] $end
$var wire 1 S! d1 [8] $end
$var wire 1 T! d1 [7] $end
$var wire 1 U! d1 [6] $end
$var wire 1 V! d1 [5] $end
$var wire 1 W! d1 [4] $end
$var wire 1 X! d1 [3] $end
$var wire 1 Y! d1 [2] $end
$var wire 1 Z! d1 [1] $end
$var wire 1 [! d1 [0] $end
$var wire 1 - s $end
$var wire 32 \! y [31:0] $end
$var parameter 32 ?% n $end

$scope module addbit[0] $end
$var parameter 32 @% i $end
$upscope $end


$scope module addbit[1] $end
$var parameter 32 A% i $end
$upscope $end


$scope module addbit[2] $end
$var parameter 32 B% i $end
$upscope $end


$scope module addbit[3] $end
$var parameter 32 C% i $end
$upscope $end


$scope module addbit[4] $end
$var parameter 32 D% i $end
$upscope $end


$scope module addbit[5] $end
$var parameter 32 E% i $end
$upscope $end


$scope module addbit[6] $end
$var parameter 32 F% i $end
$upscope $end


$scope module addbit[7] $end
$var parameter 32 G% i $end
$upscope $end


$scope module addbit[8] $end
$var parameter 32 H% i $end
$upscope $end


$scope module addbit[9] $end
$var parameter 32 I% i $end
$upscope $end


$scope module addbit[10] $end
$var parameter 32 J% i $end
$upscope $end


$scope module addbit[11] $end
$var parameter 32 K% i $end
$upscope $end


$scope module addbit[12] $end
$var parameter 32 L% i $end
$upscope $end


$scope module addbit[13] $end
$var parameter 32 M% i $end
$upscope $end


$scope module addbit[14] $end
$var parameter 32 N% i $end
$upscope $end


$scope module addbit[15] $end
$var parameter 32 O% i $end
$upscope $end


$scope module addbit[16] $end
$var parameter 32 P% i $end
$upscope $end


$scope module addbit[17] $end
$var parameter 32 Q% i $end
$upscope $end


$scope module addbit[18] $end
$var parameter 32 R% i $end
$upscope $end


$scope module addbit[19] $end
$var parameter 32 S% i $end
$upscope $end


$scope module addbit[20] $end
$var parameter 32 T% i $end
$upscope $end


$scope module addbit[21] $end
$var parameter 32 U% i $end
$upscope $end


$scope module addbit[22] $end
$var parameter 32 V% i $end
$upscope $end


$scope module addbit[23] $end
$var parameter 32 W% i $end
$upscope $end


$scope module addbit[24] $end
$var parameter 32 X% i $end
$upscope $end


$scope module addbit[25] $end
$var parameter 32 Y% i $end
$upscope $end


$scope module addbit[26] $end
$var parameter 32 Z% i $end
$upscope $end


$scope module addbit[27] $end
$var parameter 32 [% i $end
$upscope $end


$scope module addbit[28] $end
$var parameter 32 \% i $end
$upscope $end


$scope module addbit[29] $end
$var parameter 32 ]% i $end
$upscope $end


$scope module addbit[30] $end
$var parameter 32 ^% i $end
$upscope $end


$scope module addbit[31] $end
$var parameter 32 _% i $end
$upscope $end

$upscope $end


$scope module PCJumpMux $end
$var wire 32 \! d0 [31:0] $end
$var wire 32 ]! d1 [31:0] $end
$var wire 1 / s $end
$var wire 32 W y [31:0] $end
$var parameter 32 `% n $end

$scope module addbit[0] $end
$var parameter 32 a% i $end
$upscope $end


$scope module addbit[1] $end
$var parameter 32 b% i $end
$upscope $end


$scope module addbit[2] $end
$var parameter 32 c% i $end
$upscope $end


$scope module addbit[3] $end
$var parameter 32 d% i $end
$upscope $end


$scope module addbit[4] $end
$var parameter 32 e% i $end
$upscope $end


$scope module addbit[5] $end
$var parameter 32 f% i $end
$upscope $end


$scope module addbit[6] $end
$var parameter 32 g% i $end
$upscope $end


$scope module addbit[7] $end
$var parameter 32 h% i $end
$upscope $end


$scope module addbit[8] $end
$var parameter 32 i% i $end
$upscope $end


$scope module addbit[9] $end
$var parameter 32 j% i $end
$upscope $end


$scope module addbit[10] $end
$var parameter 32 k% i $end
$upscope $end


$scope module addbit[11] $end
$var parameter 32 l% i $end
$upscope $end


$scope module addbit[12] $end
$var parameter 32 m% i $end
$upscope $end


$scope module addbit[13] $end
$var parameter 32 n% i $end
$upscope $end


$scope module addbit[14] $end
$var parameter 32 o% i $end
$upscope $end


$scope module addbit[15] $end
$var parameter 32 p% i $end
$upscope $end


$scope module addbit[16] $end
$var parameter 32 q% i $end
$upscope $end


$scope module addbit[17] $end
$var parameter 32 r% i $end
$upscope $end


$scope module addbit[18] $end
$var parameter 32 s% i $end
$upscope $end


$scope module addbit[19] $end
$var parameter 32 t% i $end
$upscope $end


$scope module addbit[20] $end
$var parameter 32 u% i $end
$upscope $end


$scope module addbit[21] $end
$var parameter 32 v% i $end
$upscope $end


$scope module addbit[22] $end
$var parameter 32 w% i $end
$upscope $end


$scope module addbit[23] $end
$var parameter 32 x% i $end
$upscope $end


$scope module addbit[24] $end
$var parameter 32 y% i $end
$upscope $end


$scope module addbit[25] $end
$var parameter 32 z% i $end
$upscope $end


$scope module addbit[26] $end
$var parameter 32 {% i $end
$upscope $end


$scope module addbit[27] $end
$var parameter 32 |% i $end
$upscope $end


$scope module addbit[28] $end
$var parameter 32 }% i $end
$upscope $end


$scope module addbit[29] $end
$var parameter 32 ~% i $end
$upscope $end


$scope module addbit[30] $end
$var parameter 32 !& i $end
$upscope $end


$scope module addbit[31] $end
$var parameter 32 "& i $end
$upscope $end

$upscope $end


$scope module Branch4sll $end
$var wire 32 T a [31:0] $end
$var wire 1 ^! y [31] $end
$var wire 1 _! y [30] $end
$var wire 1 `! y [29] $end
$var wire 1 a! y [28] $end
$var wire 1 b! y [27] $end
$var wire 1 c! y [26] $end
$var wire 1 d! y [25] $end
$var wire 1 e! y [24] $end
$var wire 1 f! y [23] $end
$var wire 1 g! y [22] $end
$var wire 1 h! y [21] $end
$var wire 1 i! y [20] $end
$var wire 1 j! y [19] $end
$var wire 1 k! y [18] $end
$var wire 1 l! y [17] $end
$var wire 1 m! y [16] $end
$var wire 1 n! y [15] $end
$var wire 1 o! y [14] $end
$var wire 1 p! y [13] $end
$var wire 1 q! y [12] $end
$var wire 1 r! y [11] $end
$var wire 1 s! y [10] $end
$var wire 1 t! y [9] $end
$var wire 1 u! y [8] $end
$var wire 1 v! y [7] $end
$var wire 1 w! y [6] $end
$var wire 1 x! y [5] $end
$var wire 1 y! y [4] $end
$var wire 1 z! y [3] $end
$var wire 1 {! y [2] $end
$var wire 1 |! y [1] $end
$var wire 1 }! y [0] $end
$upscope $end


$scope module PCBranchAdd $end
$var wire 1 ^! a [31] $end
$var wire 1 _! a [30] $end
$var wire 1 `! a [29] $end
$var wire 1 a! a [28] $end
$var wire 1 b! a [27] $end
$var wire 1 c! a [26] $end
$var wire 1 d! a [25] $end
$var wire 1 e! a [24] $end
$var wire 1 f! a [23] $end
$var wire 1 g! a [22] $end
$var wire 1 h! a [21] $end
$var wire 1 i! a [20] $end
$var wire 1 j! a [19] $end
$var wire 1 k! a [18] $end
$var wire 1 l! a [17] $end
$var wire 1 m! a [16] $end
$var wire 1 n! a [15] $end
$var wire 1 o! a [14] $end
$var wire 1 p! a [13] $end
$var wire 1 q! a [12] $end
$var wire 1 r! a [11] $end
$var wire 1 s! a [10] $end
$var wire 1 t! a [9] $end
$var wire 1 u! a [8] $end
$var wire 1 v! a [7] $end
$var wire 1 w! a [6] $end
$var wire 1 x! a [5] $end
$var wire 1 y! a [4] $end
$var wire 1 z! a [3] $end
$var wire 1 {! a [2] $end
$var wire 1 |! a [1] $end
$var wire 1 }! a [0] $end
$var wire 1 z b [31] $end
$var wire 1 { b [30] $end
$var wire 1 | b [29] $end
$var wire 1 } b [28] $end
$var wire 1 ~ b [27] $end
$var wire 1 !! b [26] $end
$var wire 1 "! b [25] $end
$var wire 1 #! b [24] $end
$var wire 1 $! b [23] $end
$var wire 1 %! b [22] $end
$var wire 1 &! b [21] $end
$var wire 1 '! b [20] $end
$var wire 1 (! b [19] $end
$var wire 1 )! b [18] $end
$var wire 1 *! b [17] $end
$var wire 1 +! b [16] $end
$var wire 1 ,! b [15] $end
$var wire 1 -! b [14] $end
$var wire 1 .! b [13] $end
$var wire 1 /! b [12] $end
$var wire 1 0! b [11] $end
$var wire 1 1! b [10] $end
$var wire 1 2! b [9] $end
$var wire 1 3! b [8] $end
$var wire 1 4! b [7] $end
$var wire 1 5! b [6] $end
$var wire 1 6! b [5] $end
$var wire 1 7! b [4] $end
$var wire 1 8! b [3] $end
$var wire 1 9! b [2] $end
$var wire 1 :! b [1] $end
$var wire 1 ;! b [0] $end
$var wire 1 N" ci $end
$var wire 1 <! s [31] $end
$var wire 1 =! s [30] $end
$var wire 1 >! s [29] $end
$var wire 1 ?! s [28] $end
$var wire 1 @! s [27] $end
$var wire 1 A! s [26] $end
$var wire 1 B! s [25] $end
$var wire 1 C! s [24] $end
$var wire 1 D! s [23] $end
$var wire 1 E! s [22] $end
$var wire 1 F! s [21] $end
$var wire 1 G! s [20] $end
$var wire 1 H! s [19] $end
$var wire 1 I! s [18] $end
$var wire 1 J! s [17] $end
$var wire 1 K! s [16] $end
$var wire 1 L! s [15] $end
$var wire 1 M! s [14] $end
$var wire 1 N! s [13] $end
$var wire 1 O! s [12] $end
$var wire 1 P! s [11] $end
$var wire 1 Q! s [10] $end
$var wire 1 R! s [9] $end
$var wire 1 S! s [8] $end
$var wire 1 T! s [7] $end
$var wire 1 U! s [6] $end
$var wire 1 V! s [5] $end
$var wire 1 W! s [4] $end
$var wire 1 X! s [3] $end
$var wire 1 Y! s [2] $end
$var wire 1 Z! s [1] $end
$var wire 1 [! s [0] $end
$var wire 1 . co $end
$var wire 1 #& c [32] $end
$var wire 1 $& c [31] $end
$var wire 1 %& c [30] $end
$var wire 1 && c [29] $end
$var wire 1 '& c [28] $end
$var wire 1 (& c [27] $end
$var wire 1 )& c [26] $end
$var wire 1 *& c [25] $end
$var wire 1 +& c [24] $end
$var wire 1 ,& c [23] $end
$var wire 1 -& c [22] $end
$var wire 1 .& c [21] $end
$var wire 1 /& c [20] $end
$var wire 1 0& c [19] $end
$var wire 1 1& c [18] $end
$var wire 1 2& c [17] $end
$var wire 1 3& c [16] $end
$var wire 1 4& c [15] $end
$var wire 1 5& c [14] $end
$var wire 1 6& c [13] $end
$var wire 1 7& c [12] $end
$var wire 1 8& c [11] $end
$var wire 1 9& c [10] $end
$var wire 1 :& c [9] $end
$var wire 1 ;& c [8] $end
$var wire 1 <& c [7] $end
$var wire 1 =& c [6] $end
$var wire 1 >& c [5] $end
$var wire 1 ?& c [4] $end
$var wire 1 @& c [3] $end
$var wire 1 A& c [2] $end
$var wire 1 B& c [1] $end
$var wire 1 C& c [0] $end
$var parameter 32 D& n $end

$scope module addbit[0] $end
$var parameter 32 E& i $end

$scope module f $end
$var wire 1 }! A $end
$var wire 1 ;! B $end
$var wire 1 C& cin $end
$var wire 1 [! S $end
$var wire 1 B& cout $end
$var wire 1 F& w1 $end
$var wire 1 G& w2 $end
$var wire 1 H& w3 $end
$var wire 1 I& w4 $end
$upscope $end

$upscope $end


$scope module addbit[1] $end
$var parameter 32 J& i $end

$scope module f $end
$var wire 1 |! A $end
$var wire 1 :! B $end
$var wire 1 B& cin $end
$var wire 1 Z! S $end
$var wire 1 A& cout $end
$var wire 1 K& w1 $end
$var wire 1 L& w2 $end
$var wire 1 M& w3 $end
$var wire 1 N& w4 $end
$upscope $end

$upscope $end


$scope module addbit[2] $end
$var parameter 32 O& i $end

$scope module f $end
$var wire 1 {! A $end
$var wire 1 9! B $end
$var wire 1 A& cin $end
$var wire 1 Y! S $end
$var wire 1 @& cout $end
$var wire 1 P& w1 $end
$var wire 1 Q& w2 $end
$var wire 1 R& w3 $end
$var wire 1 S& w4 $end
$upscope $end

$upscope $end


$scope module addbit[3] $end
$var parameter 32 T& i $end

$scope module f $end
$var wire 1 z! A $end
$var wire 1 8! B $end
$var wire 1 @& cin $end
$var wire 1 X! S $end
$var wire 1 ?& cout $end
$var wire 1 U& w1 $end
$var wire 1 V& w2 $end
$var wire 1 W& w3 $end
$var wire 1 X& w4 $end
$upscope $end

$upscope $end


$scope module addbit[4] $end
$var parameter 32 Y& i $end

$scope module f $end
$var wire 1 y! A $end
$var wire 1 7! B $end
$var wire 1 ?& cin $end
$var wire 1 W! S $end
$var wire 1 >& cout $end
$var wire 1 Z& w1 $end
$var wire 1 [& w2 $end
$var wire 1 \& w3 $end
$var wire 1 ]& w4 $end
$upscope $end

$upscope $end


$scope module addbit[5] $end
$var parameter 32 ^& i $end

$scope module f $end
$var wire 1 x! A $end
$var wire 1 6! B $end
$var wire 1 >& cin $end
$var wire 1 V! S $end
$var wire 1 =& cout $end
$var wire 1 _& w1 $end
$var wire 1 `& w2 $end
$var wire 1 a& w3 $end
$var wire 1 b& w4 $end
$upscope $end

$upscope $end


$scope module addbit[6] $end
$var parameter 32 c& i $end

$scope module f $end
$var wire 1 w! A $end
$var wire 1 5! B $end
$var wire 1 =& cin $end
$var wire 1 U! S $end
$var wire 1 <& cout $end
$var wire 1 d& w1 $end
$var wire 1 e& w2 $end
$var wire 1 f& w3 $end
$var wire 1 g& w4 $end
$upscope $end

$upscope $end


$scope module addbit[7] $end
$var parameter 32 h& i $end

$scope module f $end
$var wire 1 v! A $end
$var wire 1 4! B $end
$var wire 1 <& cin $end
$var wire 1 T! S $end
$var wire 1 ;& cout $end
$var wire 1 i& w1 $end
$var wire 1 j& w2 $end
$var wire 1 k& w3 $end
$var wire 1 l& w4 $end
$upscope $end

$upscope $end


$scope module addbit[8] $end
$var parameter 32 m& i $end

$scope module f $end
$var wire 1 u! A $end
$var wire 1 3! B $end
$var wire 1 ;& cin $end
$var wire 1 S! S $end
$var wire 1 :& cout $end
$var wire 1 n& w1 $end
$var wire 1 o& w2 $end
$var wire 1 p& w3 $end
$var wire 1 q& w4 $end
$upscope $end

$upscope $end


$scope module addbit[9] $end
$var parameter 32 r& i $end

$scope module f $end
$var wire 1 t! A $end
$var wire 1 2! B $end
$var wire 1 :& cin $end
$var wire 1 R! S $end
$var wire 1 9& cout $end
$var wire 1 s& w1 $end
$var wire 1 t& w2 $end
$var wire 1 u& w3 $end
$var wire 1 v& w4 $end
$upscope $end

$upscope $end


$scope module addbit[10] $end
$var parameter 32 w& i $end

$scope module f $end
$var wire 1 s! A $end
$var wire 1 1! B $end
$var wire 1 9& cin $end
$var wire 1 Q! S $end
$var wire 1 8& cout $end
$var wire 1 x& w1 $end
$var wire 1 y& w2 $end
$var wire 1 z& w3 $end
$var wire 1 {& w4 $end
$upscope $end

$upscope $end


$scope module addbit[11] $end
$var parameter 32 |& i $end

$scope module f $end
$var wire 1 r! A $end
$var wire 1 0! B $end
$var wire 1 8& cin $end
$var wire 1 P! S $end
$var wire 1 7& cout $end
$var wire 1 }& w1 $end
$var wire 1 ~& w2 $end
$var wire 1 !' w3 $end
$var wire 1 "' w4 $end
$upscope $end

$upscope $end


$scope module addbit[12] $end
$var parameter 32 #' i $end

$scope module f $end
$var wire 1 q! A $end
$var wire 1 /! B $end
$var wire 1 7& cin $end
$var wire 1 O! S $end
$var wire 1 6& cout $end
$var wire 1 $' w1 $end
$var wire 1 %' w2 $end
$var wire 1 &' w3 $end
$var wire 1 '' w4 $end
$upscope $end

$upscope $end


$scope module addbit[13] $end
$var parameter 32 (' i $end

$scope module f $end
$var wire 1 p! A $end
$var wire 1 .! B $end
$var wire 1 6& cin $end
$var wire 1 N! S $end
$var wire 1 5& cout $end
$var wire 1 )' w1 $end
$var wire 1 *' w2 $end
$var wire 1 +' w3 $end
$var wire 1 ,' w4 $end
$upscope $end

$upscope $end


$scope module addbit[14] $end
$var parameter 32 -' i $end

$scope module f $end
$var wire 1 o! A $end
$var wire 1 -! B $end
$var wire 1 5& cin $end
$var wire 1 M! S $end
$var wire 1 4& cout $end
$var wire 1 .' w1 $end
$var wire 1 /' w2 $end
$var wire 1 0' w3 $end
$var wire 1 1' w4 $end
$upscope $end

$upscope $end


$scope module addbit[15] $end
$var parameter 32 2' i $end

$scope module f $end
$var wire 1 n! A $end
$var wire 1 ,! B $end
$var wire 1 4& cin $end
$var wire 1 L! S $end
$var wire 1 3& cout $end
$var wire 1 3' w1 $end
$var wire 1 4' w2 $end
$var wire 1 5' w3 $end
$var wire 1 6' w4 $end
$upscope $end

$upscope $end


$scope module addbit[16] $end
$var parameter 32 7' i $end

$scope module f $end
$var wire 1 m! A $end
$var wire 1 +! B $end
$var wire 1 3& cin $end
$var wire 1 K! S $end
$var wire 1 2& cout $end
$var wire 1 8' w1 $end
$var wire 1 9' w2 $end
$var wire 1 :' w3 $end
$var wire 1 ;' w4 $end
$upscope $end

$upscope $end


$scope module addbit[17] $end
$var parameter 32 <' i $end

$scope module f $end
$var wire 1 l! A $end
$var wire 1 *! B $end
$var wire 1 2& cin $end
$var wire 1 J! S $end
$var wire 1 1& cout $end
$var wire 1 =' w1 $end
$var wire 1 >' w2 $end
$var wire 1 ?' w3 $end
$var wire 1 @' w4 $end
$upscope $end

$upscope $end


$scope module addbit[18] $end
$var parameter 32 A' i $end

$scope module f $end
$var wire 1 k! A $end
$var wire 1 )! B $end
$var wire 1 1& cin $end
$var wire 1 I! S $end
$var wire 1 0& cout $end
$var wire 1 B' w1 $end
$var wire 1 C' w2 $end
$var wire 1 D' w3 $end
$var wire 1 E' w4 $end
$upscope $end

$upscope $end


$scope module addbit[19] $end
$var parameter 32 F' i $end

$scope module f $end
$var wire 1 j! A $end
$var wire 1 (! B $end
$var wire 1 0& cin $end
$var wire 1 H! S $end
$var wire 1 /& cout $end
$var wire 1 G' w1 $end
$var wire 1 H' w2 $end
$var wire 1 I' w3 $end
$var wire 1 J' w4 $end
$upscope $end

$upscope $end


$scope module addbit[20] $end
$var parameter 32 K' i $end

$scope module f $end
$var wire 1 i! A $end
$var wire 1 '! B $end
$var wire 1 /& cin $end
$var wire 1 G! S $end
$var wire 1 .& cout $end
$var wire 1 L' w1 $end
$var wire 1 M' w2 $end
$var wire 1 N' w3 $end
$var wire 1 O' w4 $end
$upscope $end

$upscope $end


$scope module addbit[21] $end
$var parameter 32 P' i $end

$scope module f $end
$var wire 1 h! A $end
$var wire 1 &! B $end
$var wire 1 .& cin $end
$var wire 1 F! S $end
$var wire 1 -& cout $end
$var wire 1 Q' w1 $end
$var wire 1 R' w2 $end
$var wire 1 S' w3 $end
$var wire 1 T' w4 $end
$upscope $end

$upscope $end


$scope module addbit[22] $end
$var parameter 32 U' i $end

$scope module f $end
$var wire 1 g! A $end
$var wire 1 %! B $end
$var wire 1 -& cin $end
$var wire 1 E! S $end
$var wire 1 ,& cout $end
$var wire 1 V' w1 $end
$var wire 1 W' w2 $end
$var wire 1 X' w3 $end
$var wire 1 Y' w4 $end
$upscope $end

$upscope $end


$scope module addbit[23] $end
$var parameter 32 Z' i $end

$scope module f $end
$var wire 1 f! A $end
$var wire 1 $! B $end
$var wire 1 ,& cin $end
$var wire 1 D! S $end
$var wire 1 +& cout $end
$var wire 1 [' w1 $end
$var wire 1 \' w2 $end
$var wire 1 ]' w3 $end
$var wire 1 ^' w4 $end
$upscope $end

$upscope $end


$scope module addbit[24] $end
$var parameter 32 _' i $end

$scope module f $end
$var wire 1 e! A $end
$var wire 1 #! B $end
$var wire 1 +& cin $end
$var wire 1 C! S $end
$var wire 1 *& cout $end
$var wire 1 `' w1 $end
$var wire 1 a' w2 $end
$var wire 1 b' w3 $end
$var wire 1 c' w4 $end
$upscope $end

$upscope $end


$scope module addbit[25] $end
$var parameter 32 d' i $end

$scope module f $end
$var wire 1 d! A $end
$var wire 1 "! B $end
$var wire 1 *& cin $end
$var wire 1 B! S $end
$var wire 1 )& cout $end
$var wire 1 e' w1 $end
$var wire 1 f' w2 $end
$var wire 1 g' w3 $end
$var wire 1 h' w4 $end
$upscope $end

$upscope $end


$scope module addbit[26] $end
$var parameter 32 i' i $end

$scope module f $end
$var wire 1 c! A $end
$var wire 1 !! B $end
$var wire 1 )& cin $end
$var wire 1 A! S $end
$var wire 1 (& cout $end
$var wire 1 j' w1 $end
$var wire 1 k' w2 $end
$var wire 1 l' w3 $end
$var wire 1 m' w4 $end
$upscope $end

$upscope $end


$scope module addbit[27] $end
$var parameter 32 n' i $end

$scope module f $end
$var wire 1 b! A $end
$var wire 1 ~ B $end
$var wire 1 (& cin $end
$var wire 1 @! S $end
$var wire 1 '& cout $end
$var wire 1 o' w1 $end
$var wire 1 p' w2 $end
$var wire 1 q' w3 $end
$var wire 1 r' w4 $end
$upscope $end

$upscope $end


$scope module addbit[28] $end
$var parameter 32 s' i $end

$scope module f $end
$var wire 1 a! A $end
$var wire 1 } B $end
$var wire 1 '& cin $end
$var wire 1 ?! S $end
$var wire 1 && cout $end
$var wire 1 t' w1 $end
$var wire 1 u' w2 $end
$var wire 1 v' w3 $end
$var wire 1 w' w4 $end
$upscope $end

$upscope $end


$scope module addbit[29] $end
$var parameter 32 x' i $end

$scope module f $end
$var wire 1 `! A $end
$var wire 1 | B $end
$var wire 1 && cin $end
$var wire 1 >! S $end
$var wire 1 %& cout $end
$var wire 1 y' w1 $end
$var wire 1 z' w2 $end
$var wire 1 {' w3 $end
$var wire 1 |' w4 $end
$upscope $end

$upscope $end


$scope module addbit[30] $end
$var parameter 32 }' i $end

$scope module f $end
$var wire 1 _! A $end
$var wire 1 { B $end
$var wire 1 %& cin $end
$var wire 1 =! S $end
$var wire 1 $& cout $end
$var wire 1 ~' w1 $end
$var wire 1 !( w2 $end
$var wire 1 "( w3 $end
$var wire 1 #( w4 $end
$upscope $end

$upscope $end


$scope module addbit[31] $end
$var parameter 32 $( i $end

$scope module f $end
$var wire 1 ^! A $end
$var wire 1 z B $end
$var wire 1 $& cin $end
$var wire 1 <! S $end
$var wire 1 #& cout $end
$var wire 1 %( w1 $end
$var wire 1 &( w2 $end
$var wire 1 '( w3 $end
$var wire 1 (( w4 $end
$upscope $end

$upscope $end

$upscope $end


$scope module CtrlUnit $end
$var wire 1 2 Op [5] $end
$var wire 1 3 Op [4] $end
$var wire 1 4 Op [3] $end
$var wire 1 5 Op [2] $end
$var wire 1 6 Op [1] $end
$var wire 1 7 Op [0] $end
$var wire 1 L Funct [5] $end
$var wire 1 M Funct [4] $end
$var wire 1 N Funct [3] $end
$var wire 1 O Funct [2] $end
$var wire 1 P Funct [1] $end
$var wire 1 Q Funct [0] $end
$var reg 1 )( MemtoReg $end
$var reg 1 *( MemWrite $end
$var reg 1 +( Branch $end
$var reg 1 ,( ALUSrc $end
$var reg 1 -( RegDst $end
$var reg 1 .( RegWrite $end
$var reg 1 /( Jump $end
$var reg 3 0( ALUControl [2:0] $end
$var reg 2 1( ALUOp [1:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module decoder4 $end
$var wire 4 2( a [3:0] $end
$var wire 16 3( y [15:0] $end
$upscope $end


$scope module mux4 $end
$var wire 32 4( d0 [31:0] $end
$var wire 32 4( d1 [31:0] $end
$var wire 32 4( d2 [31:0] $end
$var wire 32 4( d3 [31:0] $end
$var wire 2 5( s [1:0] $end
$var reg 32 6( y [31:0] $end
$var parameter 32 7( n $end
$upscope $end

$enddefinitions $end
#20
$dumpvars
0!
0"
0#
0$
1%
0&
0'
0(
1)
0*
0+
0,
0-
0.
0/
b10 0
b10 1
02
03
14
05
06
07
08
09
0:
0;
0<
0=
0>
0?
1@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
1O
0P
1Q
b0 R
bx S
b101 T
b101 U
bx V
b100 W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
b101 x
b101 y
0z
0{
0|
0}
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
0+!
0,!
0-!
0.!
0/!
00!
01!
02!
03!
04!
05!
06!
07!
08!
19!
0:!
0;!
0<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
0O!
0P!
0Q!
0R!
0S!
0T!
0U!
0V!
1W!
1X!
0Y!
0Z!
0[!
b100 \!
b10000000000000010100 ]!
0^!
0_!
0`!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
0h!
0i!
0j!
0k!
0l!
0m!
0n!
0o!
0p!
0q!
0r!
0s!
0t!
0u!
0v!
0w!
0x!
1y!
0z!
1{!
0|!
0}!
b1000000000000 ~!
b100000 !"
b0 ""
b100000 #"
b100000000000100000000000000101 $"
b1000000 %"
b100000 &"
b0 '"
bx ("
b0 )"
b101 *"
b101 +"
b1000000000000 ,"
b100000 -"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
1K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0["
0\"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
0n"
0o"
b100000 p"
b0 q"
0r"
0s"
0t"
0u"
b1 v"
0w"
0x"
0y"
0z"
b10 {"
1|"
0}"
0~"
0!#
b11 "#
0##
0$#
0%#
0&#
b100 '#
0(#
0)#
0*#
0+#
b101 ,#
0-#
0.#
0/#
00#
b110 1#
02#
03#
04#
05#
b111 6#
07#
08#
09#
0:#
b1000 ;#
0<#
0=#
0>#
0?#
b1001 @#
0A#
0B#
0C#
0D#
b1010 E#
0F#
0G#
0H#
0I#
b1011 J#
0K#
0L#
0M#
0N#
b1100 O#
0P#
0Q#
0R#
0S#
b1101 T#
0U#
0V#
0W#
0X#
b1110 Y#
0Z#
0[#
0\#
0]#
b1111 ^#
0_#
0`#
0a#
0b#
b10000 c#
0d#
0e#
0f#
0g#
b10001 h#
0i#
0j#
0k#
0l#
b10010 m#
0n#
0o#
0p#
0q#
b10011 r#
0s#
0t#
0u#
0v#
b10100 w#
0x#
0y#
0z#
0{#
b10101 |#
0}#
0~#
0!$
0"$
b10110 #$
0$$
0%$
0&$
0'$
b10111 ($
0)$
0*$
0+$
0,$
b11000 -$
0.$
0/$
00$
01$
b11001 2$
03$
04$
05$
06$
b11010 7$
08$
09$
0:$
0;$
b11011 <$
0=$
0>$
0?$
0@$
b11100 A$
0B$
0C$
0D$
0E$
b11101 F$
0G$
0H$
0I$
0J$
b11110 K$
0L$
0M$
0N$
0O$
b11111 P$
0Q$
0R$
0S$
0T$
b100000 U$
b0 V$
b1 W$
b10 X$
b11 Y$
b100 Z$
b101 [$
b110 \$
b111 ]$
b1000 ^$
b1001 _$
b1010 `$
b1011 a$
b1100 b$
b1101 c$
b1110 d$
b1111 e$
b10000 f$
b10001 g$
b10010 h$
b10011 i$
b10100 j$
b10101 k$
b10110 l$
b10111 m$
b11000 n$
b11001 o$
b11010 p$
b11011 q$
b11100 r$
b11101 s$
b11110 t$
b11111 u$
b100000 v$
b0 w$
b1 x$
b10 y$
b11 z$
b100 {$
b101 |$
b110 }$
b111 ~$
b1000 !%
b1001 "%
b1010 #%
b1011 $%
b1100 %%
b1101 &%
b1110 '%
b1111 (%
b10000 )%
b10001 *%
b10010 +%
b10011 ,%
b10100 -%
b10101 .%
b10110 /%
b10111 0%
b11000 1%
b11001 2%
b11010 3%
b11011 4%
b11100 5%
b11101 6%
b11110 7%
b11111 8%
b101 9%
b0 :%
b1 ;%
b10 <%
b11 =%
b100 >%
b100000 ?%
b0 @%
b1 A%
b10 B%
b11 C%
b100 D%
b101 E%
b110 F%
b111 G%
b1000 H%
b1001 I%
b1010 J%
b1011 K%
b1100 L%
b1101 M%
b1110 N%
b1111 O%
b10000 P%
b10001 Q%
b10010 R%
b10011 S%
b10100 T%
b10101 U%
b10110 V%
b10111 W%
b11000 X%
b11001 Y%
b11010 Z%
b11011 [%
b11100 \%
b11101 ]%
b11110 ^%
b11111 _%
b100000 `%
b0 a%
b1 b%
b10 c%
b11 d%
b100 e%
b101 f%
b110 g%
b111 h%
b1000 i%
b1001 j%
b1010 k%
b1011 l%
b1100 m%
b1101 n%
b1110 o%
b1111 p%
b10000 q%
b10001 r%
b10010 s%
b10011 t%
b10100 u%
b10101 v%
b10110 w%
b10111 x%
b11000 y%
b11001 z%
b11010 {%
b11011 |%
b11100 }%
b11101 ~%
b11110 !&
b11111 "&
0N"
0#&
0$&
0%&
0&&
0'&
0(&
0)&
0*&
0+&
0,&
0-&
0.&
0/&
00&
01&
02&
03&
04&
05&
06&
07&
08&
09&
0:&
0;&
0<&
0=&
0>&
0?&
1@&
0A&
0B&
0C&
b100000 D&
b0 E&
0F&
0G&
0H&
0I&
b1 J&
0K&
0L&
0M&
0N&
b10 O&
0P&
1Q&
0R&
0S&
b11 T&
0U&
0V&
0W&
0X&
b100 Y&
1Z&
0[&
0\&
0]&
b101 ^&
0_&
0`&
0a&
0b&
b110 c&
0d&
0e&
0f&
0g&
b111 h&
0i&
0j&
0k&
0l&
b1000 m&
0n&
0o&
0p&
0q&
b1001 r&
0s&
0t&
0u&
0v&
b1010 w&
0x&
0y&
0z&
0{&
b1011 |&
0}&
0~&
0!'
0"'
b1100 #'
0$'
0%'
0&'
0''
b1101 ('
0)'
0*'
0+'
0,'
b1110 -'
0.'
0/'
00'
01'
b1111 2'
03'
04'
05'
06'
b10000 7'
08'
09'
0:'
0;'
b10001 <'
0='
0>'
0?'
0@'
b10010 A'
0B'
0C'
0D'
0E'
b10011 F'
0G'
0H'
0I'
0J'
b10100 K'
0L'
0M'
0N'
0O'
b10101 P'
0Q'
0R'
0S'
0T'
b10110 U'
0V'
0W'
0X'
0Y'
b10111 Z'
0['
0\'
0]'
0^'
b11000 _'
0`'
0a'
0b'
0c'
b11001 d'
0e'
0f'
0g'
0h'
b11010 i'
0j'
0k'
0l'
0m'
b11011 n'
0o'
0p'
0q'
0r'
b11100 s'
0t'
0u'
0v'
0w'
b11101 x'
0y'
0z'
0{'
0|'
b11110 }'
0~'
0!(
0"(
0#(
b11111 $(
0%(
0&(
0'(
0((
0)(
0*(
0+(
1,(
0-(
1.(
0/(
b10 0(
b0 1(
bz 2(
bx 3(
bz 4(
bz 5(
bx 6(
b100000 7(
$end
#25
1!
1#
b100 ""
1u
1}"
0|"
09!
1l"
18!
b0 \!
0Q&
1P&
1Y!
0@&
b0 W
b1000 \!
1U&
b1000 W
b100000000000110000000000001100 $"
1A
1N
0Q
b11 1
b1100 T
b11000000000000110000 ]!
1x!
0{!
b1100 x
b1100 *"
0P&
1_&
1V!
0Y!
b1100 +"
b1100 U
b1100 y
#30
0!
0#
#35
1!
1#
b1000 ""
1t
0u
0}"
1|"
1%#
1##
08!
19!
1k"
0l"
0%#
17!
18!
b1100 \!
1P&
b11100 \!
1[&
0Z&
1Y!
b1100 W
0k"
07!
0W!
1>&
b11100 W
1a&
0V!
b1100 \!
0[&
1Z&
1W!
1=&
0>&
b1100 W
1U!
1V!
0a&
0=&
0U!
b100000011001111111111111110111 $"
1;
1<
1?
1B
1C
1D
1E
1F
1G
1H
1I
1J
1K
1L
1M
0N
1P
1Q
b1100 '"
b1100 R
b1100 )"
b111 1
b11111111111111111111111111110111 T
b1100111111111111111011100 ]!
1^!
1_!
1`!
1a!
1b!
1c!
1d!
1e!
1f!
1g!
1h!
1i!
1j!
1k!
1l!
1m!
1n!
1o!
1p!
1q!
1r!
1s!
1t!
1u!
1v!
1w!
0x!
1z!
1{!
b11111111111111111111111111110111 x
b11111111111111111111111111110111 *"
1Q&
0P&
1V&
0U&
0_&
1d&
1i&
1n&
1s&
1x&
1}&
1$'
1)'
1.'
13'
18'
1='
1B'
1G'
1L'
1Q'
1V'
1['
1`'
1e'
1j'
1o'
1t'
1y'
1~'
1%(
1<!
1=!
1>!
1?!
1@!
1A!
1B!
1C!
1D!
1E!
1F!
1G!
1H!
1I!
1J!
1K!
1L!
1M!
1N!
1O!
1P!
1Q!
1R!
1S!
1T!
1U!
0V!
0X!
0Y!
1?&
1@&
1X&
1W&
0W!
1X!
1\&
1>&
1V!
b11 +"
b11 U
b11 y
#40
0!
0#
#45
1!
1#
b1100 ""
1u
1}"
0|"
09!
1l"
1%#
08!
b1000 \!
0Q&
1P&
1Y!
0@&
b1000 W
b0 \!
0X&
0V&
1U&
1k"
17!
b0 W
0W&
0?&
b10000 \!
1[&
0Z&
b10000 W
0\&
b111000100010000000100101 $"
04
1:
0?
0A
0B
0C
0E
0F
0G
0H
0I
0J
0K
0M
0P
b11 '"
b101 ("
b101 S
b11 R
b11 )"
b10 1
b10000000100101 T
b11100010001000000010010100 ]!
0^!
0_!
0`!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
0h!
0i!
0j!
0k!
0l!
0m!
0o!
0p!
0q!
0r!
0s!
0t!
0u!
0w!
0z!
b10000000100101 x
b10000000100101 *"
0U&
0d&
0n&
0s&
0x&
0}&
0$'
0)'
0.'
08'
0='
0B'
0G'
0L'
0Q'
0V'
0['
0`'
0e'
0j'
0o'
0t'
0y'
0~'
0%(
0<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0M!
0N!
0O!
0P!
0Q!
0R!
0S!
0U!
0X!
1-(
0,(
b10 1(
b10000000101000 +"
b10000000101000 U
0)
1+
b100 1
b101 x
b101 *"
b10000000101000 y
b1 0(
b1000 +"
b1000 U
b1 0
b1000 y
b111 +"
b111 U
b111 y
#50
0!
0#
#55
1!
1#
b10000 ""
1s
0t
0u
0}"
1|"
0%#
0##
1*#
1(#
07!
18!
19!
1j"
0k"
0l"
16!
17!
08!
b10100 \!
1Q&
0P&
0*#
b110100 \!
1b&
1_&
0j"
0Y!
1@&
b10100 W
0V!
1X!
06!
1=&
b110100 W
1U!
b10100 \!
0b&
0_&
1V!
0=&
b10100 W
0U!
b11001000010100000100100 $"
0:
1?
0@
1F
0Q
b1100 '"
b111 ("
b111 S
b1100 R
b1100 )"
b101 1
b10100000100100 T
b1100100001010000010010000 ]!
1p!
0{!
b111 x
b111 *"
0Q&
1P&
1)'
1N!
1Y!
0@&
0X!
b0 0(
b1111 +"
b1111 U
b0 0
b1111 y
b100 +"
b100 U
b100 y
#60
0!
0#
#65
1!
1#
b10100 ""
1u
1}"
0|"
09!
1l"
18!
b10000 \!
0P&
0Y!
b10000 W
b11000 \!
1U&
1X!
b11000 W
b101001000010100000100000 $"
1:
0;
0O
b100 '"
b100 R
b100 )"
b10100000100000 T
b10100100001010000010000000 ]!
0y!
0[&
1Z&
1W!
0>&
0V!
b10 0(
b10 0
b1011 +"
b1011 U
b1011 y
#70
0!
0#
#75
1!
1#
b11000 ""
1t
0u
0}"
1|"
1%#
1##
08!
19!
1k"
0l"
0%#
07!
18!
b11100 \!
1P&
1*#
b1100 \!
0Z&
1j"
0k"
1Y!
b11100 W
0*#
16!
17!
0W!
b1100 W
b111100 \!
1_&
1Z&
0j"
06!
1V!
1W!
b111100 W
b11100 \!
0_&
0V!
b11100 W
b10000101001110000000000001010 $"
15
1@
1A
0D
0F
0L
1N
1P
b1011 '"
b11 ("
b11 S
b1011 R
b1011 )"
b0 1
b1010 T
b10100111000000000000101000 ]!
0n!
0p!
0v!
1x!
1z!
b11 x
b11 *"
1V&
0U&
1_&
0i&
0)'
03'
0L!
0N!
0T!
1V!
0X!
1?&
1]&
0W!
1>&
1a&
0V!
1=&
1U!
0.(
x-(
1+(
x)(
b1 1(
bx 0(
b1110 +"
b1110 U
bx 0
x*
1,
x+
0%
b0xxx 1
bx y
b110 0(
b0 +"
1'
b0 U
b110 0
1-
b1000100 \!
b1000100 W
b1000 +"
0'
b1000 U
0-
b11100 \!
b11100 W
#80
0!
0#
#85
1!
1#
b11100 ""
1u
1}"
0|"
09!
1l"
1%#
08!
b11000 \!
0P&
0Y!
b11000 W
b10000 \!
0V&
1U&
1k"
1*#
07!
1X!
0?&
b10000 W
1W!
b0 \!
0]&
0Z&
1j"
16!
0W!
0>&
b0 W
0a&
1V!
b100000 \!
1`&
0_&
0V!
b100000 W
b11001000010000000101010 $"
05
0:
1;
0@
0A
1D
1L
b1100 '"
b111 ("
b111 S
b1100 R
b1100 )"
b0x00 1
b10000000101010 T
b1100100001000000010101000 ]!
1n!
1v!
b111 x
b111 *"
1i&
13'
1L!
1T!
1.(
1-(
0+(
0)(
b10 1(
b101 +"
b101 U
0*
0,
1+
1%
b100 1
b101 y
b111 0(
b111 0
b0 +"
1'
b0 U
b0 y
#90
0!
0#
#95
1!
1#
b100000 ""
1r
0s
0t
0u
0}"
1|"
0%#
0##
0*#
0(#
1/#
1-#
06!
17!
18!
19!
1i"
0j"
0k"
0l"
15!
16!
07!
08!
b100100 \!
1P&
0/#
b1100100 \!
1g&
1d&
0i"
1Y!
b100100 W
05!
0U!
1<&
b1100100 W
1k&
0T!
b100100 \!
0g&
0d&
1U!
1;&
0<&
b100100 W
1S!
1T!
0k&
0;&
0S!
b10000100000000000000000000001 $"
15
1:
0;
0<
0?
0D
0L
0N
0P
1Q
b0 '"
b0 ("
b0 S
b0 R
b0 )"
b0 1
b1 T
b10000000000000000000000100 ]!
0n!
0v!
0x!
0z!
1{!
b0 x
b0 *"
1Q&
0P&
0U&
0`&
1_&
0i&
03'
0L!
0T!
1V!
0X!
0Y!
0=&
1@&
0U!
1X!
0.(
x-(
1+(
x)(
b1 1(
bx 0(
b0 +"
bx 0
x*
1,
x+
0%
1-
bx y
b101000 \!
b101000 W
b110 0(
b110 0
#100
0!
0#
#105
1!
1#
b101000 ""
1t
1##
18!
1X&
1U&
0X!
1?&
1W!
b100000 \!
b100000 W
b110000 \!
b110000 W
b111000100010000000101010 $"
05
1;
1<
1@
1D
1L
1N
1P
0Q
b11 '"
b101 ("
b101 S
b11 R
b11 )"
b0xx0 1
b10000000101010 T
b11100010001000000010101000 ]!
1n!
1v!
1x!
1z!
0{!
b101 x
b101 *"
0Q&
1P&
1W&
1V&
0U&
1`&
0_&
1i&
13'
1L!
1T!
0V!
1X!
1Y!
1=&
0@&
0X&
0W&
1U!
0X!
b1000000010010100 \!
b1000000010010100 W
b1000000011010100 \!
b1000000011010100 W
1.(
1-(
0+(
0)(
b10 1(
b11111111111111111111111111111110 +"
0'
b11111111111111111111111111111110 U
0*
0,
1+
1%
b100 1
b11111111111111111111111111111110 y
0-
b101100 \!
b101100 W
b111 0(
b111 0
b1 +"
b1 U
b1 y
#110
0!
0#
#115
1!
1#
b101100 ""
1u
1}"
0|"
09!
1l"
1%#
08!
b101000 \!
0P&
0Y!
b101000 W
b100000 \!
0V&
1U&
1k"
17!
1X!
0?&
b100000 W
0W!
b110000 \!
1Z&
1W!
b110000 W
b100001010011100000100000 $"
0;
0<
1?
0@
1A
1E
1F
0N
0P
b1 '"
b1011 ("
b1011 S
b1 R
b1 )"
b111 1
b11100000100000 T
b10000101001110000010000000 ]!
1o!
1p!
0x!
0z!
b1011 x
b1011 *"
0U&
0`&
1_&
1)'
1.'
1M!
1N!
1V!
0X!
0=&
0U!
b10 0(
b10 0
b1100 +"
b1100 U
b1100 y
#120
0!
0#
#125
1!
1#
b110000 ""
1s
0t
0u
0}"
1|"
0%#
0##
1*#
1(#
07!
18!
19!
1j"
0k"
0l"
06!
17!
08!
b110100 \!
1P&
0*#
1/#
b10100 \!
0_&
1i"
0j"
1Y!
b110100 W
0/#
15!
16!
0V!
b10100 W
b1110100 \!
1d&
1_&
0i"
05!
1U!
1V!
b1110100 W
b110100 \!
0d&
0U!
b110100 W
b111000100011100000100010 $"
1;
1<
0?
1@
0A
1P
b1100 '"
b101 ("
b101 S
b1100 R
b1100 )"
b11100000100010 T
b11100010001110000010001000 ]!
1z!
b101 x
b101 *"
1U&
1X!
b110 0(
b10001 +"
b10001 U
b110 0
b10001 y
b111 +"
b111 U
b111 y
#130
0!
0#
#135
1!
1#
b110100 ""
1u
1}"
0|"
09!
1l"
18!
b110000 \!
0P&
0Y!
b110000 W
b111000 \!
1V&
0U&
0X!
1?&
b111000 W
1]&
0W!
1>&
1b&
0V!
1=&
1U!
b10101100011001110000000001000100 $"
12
14
16
17
0:
1?
1A
0D
0E
0F
1K
0L
1O
0P
b111 ("
b111 S
b0 1
b1000100 T
b1100111000000000100010000 ]!
0n!
0o!
0p!
1u!
0v!
1y!
0z!
b111 x
b111 *"
0V&
1U&
1\&
1[&
0Z&
0i&
1n&
0)'
0.'
03'
0L!
0M!
0N!
1S!
0T!
1W!
1X!
0?&
0]&
0\&
0W!
0.(
x-(
1,(
1*(
x)(
b0 1(
bx 0(
b101 +"
b101 U
bx 0
x*
1&
1)
x+
0%
b0xxx 1
b1000100 x
b1000100 *"
bx y
b10 0(
b0 +"
1'
b0 U
b10 0
b1010000 +"
0'
b1010000 U
#136
b111 V
b0x0x0xxx y
#140
0!
0#
#145
1!
1#
b111000 ""
1t
0u
0}"
1|"
1%#
1##
08!
19!
1k"
0l"
0%#
07!
18!
b111100 \!
1P&
1*#
b101100 \!
0[&
1Z&
1j"
0k"
1Y!
b111100 W
0*#
06!
17!
1/#
1W!
0>&
b101100 W
1V!
b11100 \!
0b&
0_&
1i"
0j"
1[&
0Z&
0/#
15!
16!
0W!
0=&
1>&
b11100 W
0U!
b1111100 \!
1d&
1b&
1_&
0i"
05!
0V!
b1111100 W
1=&
b111100 \!
0d&
1U!
b111100 W
b10001100000000100000000001010000 $"
04
0;
0<
0?
0A
1M
0O
b0 '"
b101 ("
b101 S
b0 R
b0 )"
b0x0 1
b1010000 T
b10000000000101000000 ]!
1w!
0y!
b1010000 x
b1010000 *"
0[&
1Z&
1f&
1d&
0U!
1W!
1<&
0>&
0b&
1T!
1V!
0=&
0f&
1U!
0<&
0T!
1.(
0-(
0*(
1)(
b1010000 +"
1*
0&
0+
1%
b10 1
b111 y
#150
0!
0#
#155
1!
1#
b111100 ""
1u
1}"
0|"
09!
1l"
1%#
08!
b111000 \!
0P&
0Y!
b111000 W
b110000 \!
0U&
1k"
1*#
07!
0X!
b110000 W
b100000 \!
0Z&
1j"
1/#
06!
0W!
b100000 W
b0 \!
0_&
1i"
15!
0V!
b0 W
b1000000 \!
1e&
0d&
0U!
1<&
b1000000 W
1T!
b1000000000000000000000010001 $"
02
07
0@
0K
1Q
b0 ("
b0 S
b0 1
b10001 T
b1000100 ]!
0u!
1{!
b10001 x
b10001 *"
1P&
0n&
0S!
1Y!
0.(
x-(
x,(
x+(
x)(
bx 1(
1/(
b10001 +"
b10001 U
1/
x*
x,
x)
x+
0%
bx V
b0x000x x
b0x000x *"
b0x0xxx y
b1000100 W
bx y
bx 0(
bx +"
x'
bx U
bx 0
x-
b0xx000x00 \!
b0 +"
1'
b0 U
#160
0!
0#
#165
1!
1#
b1000100 ""
1q
0r
0s
0t
0%#
0##
0*#
0(#
0/#
0-#
14#
12#
05!
16!
17!
18!
1h"
0i"
0j"
0k"
14!
15!
06!
07!
b0xx00xx00 \!
1U&
04#
1l&
1i&
0h"
1X!
04!
0T!
1;&
1S!
b0x00xx00 \!
0l&
0i&
1T!
0;&
b0x0x00xx00 \!
0S!
b0xxx00xx00 \!
b0xx00xx00 \!
b10101100000000100000000001010100 $"
12
14
17
1@
1K
1O
0Q
b111 ("
b111 S
b0x0 1
b1010100 T
b10000000000101010000 ]!
1u!
1y!
0{!
b10000000000101010000 W
b0x0x0xxx x
b0x0x0xxx *"
0P&
1Z&
1n&
1S!
1W!
0Y!
b0xxx0xx000 \!
1,(
0+(
1*(
b0 1(
0/(
0/
1&
0,
1)
b1010100 x
b1010100 *"
0-
b0xxx0xx000 W
b1001000 \!
b1001000 W
b10 0(
b10 0
b1010100 +"
0'
b1010100 U
#166
b111 V
b0x0x0xxx y
#170
0!
0#
#175
1!
1#
b1001000 ""
1t
0u
0}"
1|"
1%#
1##
08!
19!
1k"
0l"
0%#
17!
18!
b1001100 \!
1P&
b1011100 \!
1[&
0Z&
1Y!
b1001100 W
0k"
07!
0W!
1>&
b1011100 W
1V!
b1001100 \!
0[&
1Z&
1W!
0>&
b1001100 W
0V!
bx $"
x2
x3
x4
x5
x6
x7
x8
x9
x:
x;
x<
x=
x>
x?
x@
xA
xB
xC
xD
xE
xF
xG
xH
xI
xJ
xK
xL
xM
xN
xO
xP
xQ
bx '"
bx ("
bx S
bx R
bx )"
bx 1
bx T
b0xxxxxxxxxxxxxxxxxxxxxxxx00 ]!
x^!
x_!
x`!
xa!
xb!
xc!
xd!
xe!
xf!
xg!
xh!
xi!
xj!
xk!
xl!
xm!
xn!
xo!
xp!
xq!
xr!
xs!
xt!
xu!
xv!
xw!
xx!
xy!
xz!
x{!
bx x
bx *"
xQ&
xP&
xV&
xU&
xZ&
x_&
xe&
xd&
xk&
xi&
xn&
xs&
xx&
x}&
x$'
x)'
x.'
x3'
x8'
x='
xB'
xG'
xL'
xQ'
xV'
x['
x`'
xe'
xj'
xo'
xt'
xy'
x~'
x%(
x<!
x=!
x>!
x?!
x@!
xA!
xB!
xC!
xD!
xE!
xF!
xG!
xH!
xI!
xJ!
xK!
xL!
xM!
xN!
xO!
xP!
xQ!
xR!
xS!
xT!
xU!
xV!
xW!
xX!
xY!
x;&
x<&
x?&
x@&
xX&
xW&
x\&
xp&
x:&
x>&
xa&
xu&
x9&
x=&
xg&
xf&
xz&
x8&
x!'
x7&
x&'
x6&
x+'
x5&
x0'
x4&
x5'
x3&
x:'
x2&
x?'
x1&
xD'
x0&
xI'
x/&
xN'
x.&
xS'
x-&
xX'
x,&
x]'
x+&
xb'
x*&
xg'
x)&
xl'
x(&
xq'
x'&
xv'
x&&
x{'
x%&
x"(
x$&
x'(
x#&
x.
x.(
x,(
x+(
x*(
bx 1(
x/(
bx +"
x'
bx U
x/
x&
x,
x)
x%
bx V
x-
b0xxxxxxxxxxxxxxxxxxxxxxxx00 W
bx y
bx00 \!
bx00 W
bx 0(
bx 0
b0 +"
1'
b0 U
#180
0!
0#
#185
1!
1#
bx00 ""
xX
xY
xZ
x[
x\
x]
x^
x_
x`
xa
xb
xc
xd
xe
xf
xg
xh
xi
xj
xk
xl
xm
xn
xo
xp
xq
xr
xs
xt
xu
x}"
x|"
x##
x(#
x-#
x2#
x7#
x<#
xA#
xF#
xK#
xP#
xU#
xZ#
x_#
xd#
xi#
xn#
xs#
xx#
x}#
x$$
x)$
x.$
x3$
x8$
x=$
xB$
xG$
xL$
xQ$
xz
x{
x|
x}
x~
x!!
x"!
x#!
x$!
x%!
x&!
x'!
x(!
x)!
x*!
x+!
x,!
x-!
x.!
x/!
x0!
x1!
x2!
x3!
x4!
x5!
x6!
x7!
x8!
x9!
xl"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx00 ]!
x%#
x]&
x[&
xb&
x`&
xl&
xj&
xq&
xo&
xv&
xt&
x{&
xy&
x"'
x~&
x''
x%'
x,'
x*'
x1'
x/'
x6'
x4'
x;'
x9'
x@'
x>'
xE'
xC'
xJ'
xH'
xO'
xM'
xT'
xR'
xY'
xW'
x^'
x\'
xc'
xa'
xh'
xf'
xm'
xk'
xr'
xp'
xw'
xu'
x|'
xz'
x#(
x!(
x((
x&(
xk"
x*#
xj"
x/#
xi"
x4#
xh"
x9#
xg"
x>#
xf"
xC#
xe"
xH#
xd"
xM#
xc"
xR#
xb"
xW#
xa"
x\#
x`"
xa#
x_"
xf#
x^"
xk#
x]"
xp#
x\"
xu#
x["
xz#
xZ"
x!$
xY"
x&$
xX"
x+$
xW"
x0$
xV"
x5$
xU"
x:$
xT"
x?$
xS"
xD$
xR"
xI$
xQ"
xN$
xP"
xS$
xO"
x(
#190
0!
0#
#195
1!
1#
#200
0!
0#
#205
1!
1#
#210
0!
0#
#215
1!
1#
#220
0!
0#
#225
1!
1#
#230
0!
0#
#235
1!
1#
#240
0!
0#
#245
1!
1#
#250
0!
0#
#255
1!
1#
#260
0!
0#
#265
1!
1#
#270
0!
0#
#275
1!
1#
#280
0!
0#
#285
1!
1#
#290
0!
0#
#295
1!
1#
#300
0!
0#
#305
1!
1#
#310
0!
0#
#315
1!
1#
#320
0!
0#
#325
1!
1#
#330
0!
0#
#335
1!
1#
#340
0!
0#
#345
1!
1#
#350
0!
0#
#355
1!
1#
#360
0!
0#
#365
1!
1#
#370
0!
0#
#375
1!
1#
#380
0!
0#
#385
1!
1#
#390
0!
0#
#395
1!
1#
#400
0!
0#
#405
1!
1#
#410
0!
0#
#415
1!
1#
#420
0!
0#
#425
1!
1#
#430
0!
0#
#435
1!
1#
#440
0!
0#
#445
1!
1#
#450
0!
0#
#455
1!
1#
#460
0!
0#
#465
1!
1#
#470
0!
0#
#475
1!
1#
#480
0!
0#
#485
1!
1#
#490
0!
0#
#495
1!
1#
#500
0!
0#
#505
1!
1#
#510
0!
0#
#515
1!
1#
#520
0!
0#
#525
1!
1#
#530
0!
0#
#535
1!
1#
#540
0!
0#
#545
1!
1#
#550
0!
0#
#555
1!
1#
#560
0!
0#
#565
1!
1#
#570
0!
0#
#575
1!
1#
#580
0!
0#
#585
1!
1#
#590
0!
0#
#595
1!
1#
#600
0!
0#
#605
1!
1#
#610
0!
0#
#615
1!
1#
#620
0!
0#
#625
1!
1#
#630
0!
0#
#635
1!
1#
#640
0!
0#
#645
1!
1#
#650
0!
0#
#655
1!
1#
#660
0!
0#
#665
1!
1#
#670
0!
0#
#675
1!
1#
#680
0!
0#
#685
1!
1#
#690
0!
0#
#695
1!
1#
#700
0!
0#
#705
1!
1#
#710
0!
0#
#715
1!
1#
#720
0!
0#
#725
1!
1#
#730
0!
0#
#735
1!
1#
#740
0!
0#
#745
1!
1#
#750
0!
0#
#755
1!
1#
#760
0!
0#
#765
1!
1#
#770
0!
0#
#775
1!
1#
#780
0!
0#
#785
1!
1#
#790
0!
0#
#795
1!
1#
#800
0!
0#
#805
1!
1#
#810
0!
0#
#815
1!
1#
#820
0!
0#
#825
1!
1#
#830
0!
0#
#835
1!
1#
#840
0!
0#
#845
1!
1#
#850
0!
0#
#855
1!
1#
#860
0!
0#
#865
1!
1#
#870
0!
0#
#875
1!
1#
#880
0!
0#
#885
1!
1#
#890
0!
0#
#895
1!
1#
#900
0!
0#
#905
1!
1#
#910
0!
0#
#915
1!
1#
#920
0!
0#
#925
1!
1#
#930
0!
0#
#935
1!
1#
#940
0!
0#
#945
1!
1#
#950
0!
0#
#955
1!
1#
#960
0!
0#
#965
1!
1#
#970
0!
0#
#975
1!
1#
#980
0!
0#
#985
1!
1#
#990
0!
0#
#995
1!
1#
#1000
0!
0#
#1005
1!
1#
#1010
0!
0#
#1015
1!
1#
#1020
